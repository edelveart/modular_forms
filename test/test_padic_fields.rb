# frozen_string_literal: true

require 'prime'
require 'minitest/autorun'
require_relative '../lib/modular_forms'

class TestModularForms < Minitest::Test
  E4_POW5 = ModularForms.eisenstein_series_pow(4, 5, 100)
  PVAL_DATA = [0, 4, 4, 6, 4, 5, 6, 7, 4, 4, 5, 6, 6, 5, 7, 7, 4, 5, 4, 6, 5, 9, 6, 7, 6, 4, 5, 7, 7, 5, 7, 9, 4, 8, 5,
               8, 4, 5, 6, 7, 5, 5, 9, 6, 6, 5, 7, 8, 6, 4, 4, 7, 5, 5, 7, 7, 7, 8, 5, 6, 7, 5, 9, 7, 4, 6, 8, 6, 5, 9, 8, 7, 4, 5, 5, 6, 6, 9, 7, 8, 5, 4, 5, 6, 9, 6, 6, 7, 6, 5, 5, 8, 7, 11, 8, 7, 6, 5, 4, 6].freeze # rubocop:disable Layout/LineLength

  PNORM_DATA = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 0.14285714285714285,
                0.14285714285714285, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 0.14285714285714285, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 1.0, 1.0, 1.0, 1.0, 0.14285714285714285, 0.02040816326530612, 1.0, 1.0].freeze # rubocop:disable Layout/LineLength

  PEXPANSION_DATA = [[1], [1, 4, 3, 0, 0], [1, 2, 2, 2, 3, 4, 2, 0, 0], [1, 0, 2, 3, 0, 1, 2, 4, 0, 0],
                     [4, 4, 3, 2, 4, 2, 1, 4, 0, 0], [2, 2, 4, 1, 3, 4, 4, 3, 0, 0], [2, 1, 4, 0, 4, 3, 4, 1, 0, 0], [3, 2, 1, 4, 1, 0, 2, 2, 0, 0], [2, 1, 0, 1, 3, 0, 0, 0], [4, 2, 3, 1, 2, 4, 2, 1, 0, 0], [3, 4, 3, 1, 4, 1, 4, 2, 0, 0], [3, 4, 3, 1, 0, 3, 1, 0, 0], [3, 2, 3, 1, 1, 3, 2, 2, 0, 0], [2, 0, 0, 3, 1, 4, 3, 4, 0, 0], [1, 3, 0, 0, 0, 2, 3, 3, 0, 0], [2, 0, 4, 4, 2, 2, 2, 4, 0, 0], [1, 2, 4, 4, 2, 3, 3, 0, 0], [4, 0, 2, 2, 1, 4, 3, 2, 0, 0], [4, 3, 4, 4, 1, 1, 0, 4, 0, 0], [3, 1, 3, 4, 2, 1, 3, 0, 0, 0], [4, 0, 2, 2, 1, 1, 4, 0, 0], [2, 4, 0, 3, 3, 2, 3, 1, 0, 0], [2, 1, 2, 3, 1, 2, 4, 4, 0, 0], [1, 0, 0, 4, 4, 4, 0, 0], [2, 2, 3, 0, 3, 4, 0, 0, 0], [4, 4, 0, 1, 2, 4, 4, 3, 0, 0], [2, 2, 4, 3, 1, 3, 3, 1, 0, 0], [4, 3, 1, 0, 2, 0, 0, 0], [1, 0, 1, 3, 2, 1, 4, 1, 0, 0], [3, 1, 3, 2, 4, 1, 2, 0, 0, 0], [2, 2, 2, 4, 4, 1, 0, 0], [2, 3, 3, 3, 4, 1, 1, 1, 0, 0], [4, 1, 4, 3, 0, 4, 1, 2, 0, 0], [3, 2, 4, 0, 3, 0, 2, 3, 0, 0], [1, 0, 0, 3, 1, 2, 3, 0, 0], [2, 0, 3, 2, 3, 2, 2, 0, 0], [2, 1, 4, 3, 2, 4, 2, 3, 0, 0], [3, 1, 0, 3, 1, 2, 0, 2, 0, 0], [1, 3, 3, 0, 2, 2, 2, 0, 0, 0], [2, 1, 4, 4, 3, 3, 2, 0, 0], [3, 2, 4, 1, 1, 1, 3, 0, 0, 0], [2, 4, 3, 1, 4, 0, 0, 1, 0, 0], [2, 0, 0, 4, 1, 0, 4, 4, 0, 0], [2, 3, 2, 0, 1, 1, 4, 0, 0], [2, 2, 1, 1, 2, 4, 0, 3, 0, 0], [3, 4, 2, 2, 1, 0, 2, 1, 0, 0], [4, 3, 2, 2, 1, 2, 1, 0, 0], [3, 0, 2, 0, 2, 0, 1, 2, 0, 0], [4, 1, 3, 3, 3, 0, 4, 4, 0, 0], [1, 0, 4, 1, 3, 2, 4, 0, 0], [4, 3, 1, 0, 3, 1, 4, 2, 0, 0], [1, 3, 3, 0, 1, 3, 1, 1, 0, 0], [2, 1, 0, 2, 3, 4, 0, 2, 0, 0], [2, 1, 0, 4, 2, 2, 2, 4, 0, 0], [3, 4, 4, 2, 4, 0, 3, 0, 0, 0], [3, 2, 2, 2, 1, 3, 1, 0, 0], [2, 2, 0, 1, 4, 0, 2, 0, 0, 0], [4, 1, 3, 1, 4, 3, 4, 0, 0, 0], [2, 0, 4, 0, 4, 4, 3, 0, 0, 0], [1, 1, 1, 0, 1, 4, 0, 0, 0], [3, 4, 4, 4, 2, 1, 2, 2, 0, 0], [1, 3, 0, 4, 4, 3, 1, 0, 0], [2, 4, 4, 0, 2, 1, 1, 4, 0, 0], [3, 1, 3, 0, 2, 1, 4, 0, 0], [2, 4, 4, 0, 2, 2, 4, 0, 0], [4, 0, 0, 0, 0, 0, 3, 4, 0, 0], [3, 3, 0, 0, 0, 1, 1, 2, 0, 0], [4, 4, 0, 0, 3, 2, 0, 0], [2, 4, 2, 4, 3, 0, 2, 1, 0, 0], [3, 3, 1, 3, 1, 2, 1, 2, 0, 0], [2, 4, 2, 0, 0, 0, 3, 3, 0, 0], [2, 2, 3, 1, 3, 0, 2, 1, 0, 0], [1, 4, 4, 3, 3, 1, 1, 0, 0, 0], [1, 2, 1, 4, 2, 0, 4, 4, 0, 0], [4, 3, 1, 2, 3, 0, 0, 3, 0, 0], [1, 3, 0, 4, 0, 2, 2, 4, 0, 0], [1, 3, 4, 2, 0, 2, 4, 0, 0, 0], [3, 1, 1, 3, 1, 0, 0, 4, 0, 0], [3, 0, 0, 3, 1, 4, 2, 3, 0, 0], [4, 0, 0, 0, 2, 0, 2, 0, 0, 0], [4, 4, 4, 2, 4, 0, 3, 3, 0, 0], [1, 2, 4, 4, 2, 3, 3, 3, 0, 0], [4, 4, 3, 4, 4, 2, 4, 0, 0], [3, 0, 2, 2, 1, 3, 0, 4, 0, 0], [4, 4, 0, 2, 2, 0, 0, 3, 0, 0], [3, 3, 1, 2, 3, 2, 3, 2, 0, 0], [1, 3, 2, 0, 1, 0, 1, 0, 0], [2, 1, 2, 0, 4, 0, 1, 0, 0, 0], [2, 0, 4, 3, 2, 1, 0, 0, 0], [2, 3, 2, 0, 0, 1, 1, 0, 0, 0], [1, 2, 1, 0, 2, 0, 4, 0, 0], [3, 1, 3, 1, 2, 3, 2, 1, 0, 0], [1, 0, 4, 4, 0, 0, 3, 2, 0, 0], [4, 2, 3, 3, 1, 1, 1, 3, 0, 0], [4, 4, 3, 0, 2, 4, 4, 3, 0, 0], [3, 4, 3, 4, 1, 1, 3, 0, 0, 0], [3, 3, 3, 2, 4, 1, 0, 1, 0, 0], [4, 1, 0, 2, 4, 1, 1, 2, 0, 0], [4, 4, 0, 0, 2, 0, 4, 1, 0, 0], [1, 0, 1, 1, 1, 2, 2, 0, 0]].freeze # rubocop:disable Layout/LineLength

  POL_2DEG_DATA = ['x**2 + x + 1',
                   'x**2 + 2*x + 2',
                   'x**2 + 4*x + 2',
                   'x**2 + 6*x + 3',
                   'x**2 + 7*x + 2',
                   'x**2 + 12*x + 2',
                   'x**2 + 16*x + 3',
                   'x**2 + 18*x + 2',
                   'x**2 + 21*x + 5'].freeze

  def test_padic_valuation
    padic_arr = []
    E4_POW5.each do |i|
      padic_arr << ModularForms.padic_valuation(i, 2)
    end
    assert_equal(PVAL_DATA, padic_arr)
  end

  def test_padic_norm
    padic_arr = []
    E4_POW5.each do |i|
      padic_arr << ModularForms.padic_norm(i, 7)
    end
    assert_equal(PNORM_DATA, padic_arr)
  end

  def test_padic_expansion
    padic_arr = []
    E4_POW5.each do |i|
      padic_arr << ModularForms.padic_expansion(i, 5, 11, true)
    end
    assert_equal(PEXPANSION_DATA, padic_arr)
  end

  def test_def_pol_2deg
    padic_arr = []
    (1..23).each do |i|
      padic_arr << ModularForms.def_pol_2deg(i, 0, 1) if Prime.prime?(i)
    end
    assert_equal(POL_2DEG_DATA, padic_arr)
  end
end
